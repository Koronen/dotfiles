#!/usr/bin/env python

import json
import os
import sys

def parse_args(argv, outputs):
    workspace_output = {}
    workspaces = set()

    for arg in argv:
        if arg in outputs:
            for workspace in workspaces:
                workspace_output[workspace] = arg
            workspaces.clear()
        else:
            workspaces.add(arg)

    if len(workspaces) != 0:
        raise StandardError("workspaces listed without output")

    return workspace_output

def i3_get_workspaces():
    workspaces_json = os.popen("i3-msg -t get_workspaces").read()
    return json.loads(workspaces_json)

def build_i3_cmd(config, workspaces):
    i3_cmds = []

    for w in workspaces:
        name = w['name']
        current_output = w['output']
        desired_output = config.get(name, None)

        if desired_output and current_output != desired_output:
            i3_cmds.append("workspace {0}".format(name))
            i3_cmds.append("move workspace to {0}".format(desired_output))

    focused_workspace = next(x['name'] for x in workspaces if x['focused'])
    i3_cmds.append("workspace {0}".format(focused_workspace))

    return "; ".join(i3_cmds)

# Usage: i3-move-workspaces WORKSPACE1 [WORKSPACE2, ...] OUTPUT1 [WORKSPACE3 OUTPUT2]
def main(argv):
    i3_workspaces = i3_get_workspaces()
    i3_outputs = set(w['output'] for w in i3_workspaces)
    outputs_config = parse_args(argv[1:], i3_outputs)

    i3_cmd = build_i3_cmd(outputs_config, i3_workspaces)
    cmd = "i3-msg -q \"{0}\"".format(i3_cmd)
    os.popen(cmd)

if __name__ == '__main__':
    main(sys.argv)
